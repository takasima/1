#!/usr/bin/perl -w

use strict;
use warnings;
use Carp;
use English;

use lib 'lib', '../lib', 'extlib', '../extlib';

require MT;

use Cwd;
use Encode;
use File::Basename;
use File::Copy;
use File::Find;
use File::Path;
use File::Spec;

use MT::FileMgr;
use MT::Util qw( epoch2ts perl_sha1_digest_hex format_ts );

use lib qw( plugins/PowerSearch/lib );
use PowerSearch::Util qw(
    _get_estcmdpath _get_estcmdindex _get_estfilterpath _get_tempdir
    _timezone _to_hash
);

use lib qw( addons/PowerCMS.pack/lib );
use PowerCMS::Util qw( site_path site_url );

my $app    = MT->instance();
my $fmgr   = MT::FileMgr->new('Local') or die MT::FileMgr->errstr;
my $plugin = MT->component('PowerSearch');

my $tmp_dir = _get_tempdir() or die;
my $index_tmp    = File::Spec->catfile( $tmp_dir, "estindex_tmp" );
my $index_remove = File::Spec->catfile( $tmp_dir, "estindex_remove" );

my $index         = _get_estcmdindex()   or die;
my $estcmdpath    = _get_estcmdpath()    or die;
my $estfilterpath = _get_estfilterpath() or die;

my $target_files = $plugin->get_config_value('target_files');
my @extentions = split( /,/, $target_files );

rmtree( ["$index_tmp"] )    if ( -d "$index_tmp" );
rmtree( ["$index_remove"] ) if ( -d "$index_remove" );

my @dirs;

my $cwd = Cwd::getcwd();
my $blogs = MT::Blog->load_iter( { class => '*' } );
while ( my $blog = $blogs->() ) {
    my $blog_id   = $blog->id;
    my $site_path = site_path($blog);
    my $site_url  = site_url($blog);
    my $config_id = 'blog:' . $blog->id;

    my $draft_base = $plugin->get_config_value( 'draftpath', $config_id );
    $draft_base = $plugin->get_config_value('draftpath') unless $draft_base;
    if ($draft_base) {
        $draft_base = File::Spec->catdir( $site_path, $draft_base );
    }
    push( @dirs, $draft_base );

    my $exclude_indexing
        = $plugin->get_config_value( 'exclude_indexing', $config_id );
    my @exclude = split( /,/, $exclude_indexing ) if $exclude_indexing;
    my $abs_path = File::Spec->abs2rel( $site_path, $cwd );
    my @directories_to_search = ($abs_path);
    my @wantedFiles;
    File::Find::find(
        sub {

            unless (/^\./) {
                my $fn  = $_;
                my $dir = $File::Find::dir;
                $dir = Encode::decode_utf8($dir)
                    unless ( Encode::is_utf8($dir) );
                $fn = Encode::decode_utf8($fn)
                    unless ( Encode::is_utf8($fn) );
                push( @wantedFiles, File::Spec->catfile( $dir, $fn ) );
            }
        },
        @directories_to_search
    );
    my $abs = quotemeta($abs_path);
    for my $f (@wantedFiles) {
        if ( -f $f ) {
            my ( $name, $path, $suffix )
                = File::Basename::fileparse( lc($f), @extentions );
            if ($suffix) {
                $f =~ s/$abs//;
                my $full_path = "$site_path$f";
                my $file_url  = "$site_url$f";
                my $indexing  = 1;
                if ($exclude_indexing) {
                    for my $ex_path (@exclude) {
                        my $ex_path_reg = quotemeta($ex_path);
                        if ( $full_path =~ /^$ex_path_reg/ ) {
                            $indexing = 0 if $indexing;
                            last;
                        }
                    }
                }
                if ($indexing) {
                    $suffix =~ s/\.//g;
                    $suffix = lc($suffix);
                    my $fname = _to_hash($full_path);
                    my $ts    = ( stat $full_path )[9];
                    $ts = epoch2ts( $blog, $ts );
                    $ts = format_ts( '%Y-%m-%dT%H:%M:%S', $ts, $blog );
                    my $tz = _timezone($blog);
                    $ts .= $tz;
                    my $draft = <<"EOS";
\@uri=$file_url
\@cdate=$ts
\@mdate=$ts
\@blog_id=$blog_id
\@suffix=$suffix
EOS

                    my $filter_cmd;
                    my $dopt = '-fh';
                    next if $suffix !~ /(xls|doc|ppt|pdf)$/i;

                    if ( $OSNAME eq 'MSWin32' ) {
                        $filter_cmd = File::Spec->catdir( $estfilterpath,
                            'xdoc2txt' );
                        $dopt = '-ft -ic CP932';
                        $draft .= "\@title=$file_url\n";
                    }
                    elsif ( $suffix =~ /(xls|doc|ppt)$/i ) {
                        $filter_cmd = File::Spec->catdir( $estfilterpath,
                            'estfxmsotohtml' );
                    }
                    elsif ( $suffix =~ /pdf$/i ) {
                        $filter_cmd = File::Spec->catdir( $estfilterpath,
                            'estfxpdftohtml' );
                    }
                    my $outpath = File::Spec->catdir( $tmp_dir,
                        "$fname.file.est.tmp" );
                    my $esc_full_path = $full_path;
                    if ( $OSNAME eq 'MSWin32' ) {
                        $esc_full_path = qq/"$esc_full_path"/;
                    }
                    else {
                        $esc_full_path =~ s/'/'\\''/g;
                        $esc_full_path = qq/'$esc_full_path'/;
                    }
                    $filter_cmd
                        .= " $esc_full_path | $estcmdpath draft $dopt > $outpath";

# If Search Results of Attach File is MOJIBAKE, please use following code instead of above.
#.= " $esc_full_path | $estcmdpath draft -ic UTF-8 $dopt > $outpath";
                    system($filter_cmd);

                    if ( $? == -1 ) {
                        MT->log(
                            $plugin->translate(
                                'Failed to execute external commands. Message: [_1]',
                                ""
                            )
                        );
                    }
                    elsif ( $? & 127 ) {
                        my $message = sprintf(
                            "child died with signal %d, %s coredump\n",
                            ( $? & 127 ),
                            ( $? & 128 ) ? 'with' : 'without'
                        );

                        MT->log(
                            $plugin->translate(
                                'Failed to execute external commands. Message: [_1]',
                                $message
                            )
                        );
                    }

                    my $data  = $fmgr->get_data($outpath);
                    my $title = $data;
                    if ( $data =~ m/^.*?\@title=(.*?)\n.*$/s ) {
                        if ( $1 eq $full_path ) {
                            $data
                                =~ s/(^.*?\@title=)(.*?)(\n.*$)/$1$name$suffix$3/s;
                        }
                    }
                    $draft .= $data;
                    if ( -d $draft_base ) {
                        my $outest = File::Spec->catdir( $draft_base,
                            "$fname.file.est" );
                        $fmgr->put_data( $draft, $outest );
                    }
                    $fmgr->delete($outpath);
                }
            }
        }
    }
    my $gatherlang = $plugin->get_config_value( 'gatherlang', $config_id );
    $gatherlang = $plugin->get_config_value('gatherlang')
        unless $gatherlang;
    $gatherlang = " -il $gatherlang " if $gatherlang;
    if ( -d $draft_base ) {
        my $command
            = "$estcmdpath gather $gatherlang -sd $index_tmp $draft_base";

# If Search Results of Attach File is MOJIBAKE, please use following code instead of above.
#= "$estcmdpath gather $gatherlang -ic UTF-8 -sd $index_tmp $draft_base";
        system($command);

        if ( $? == -1 ) {
            MT->log(
                $plugin->translate(
                    'Failed to execute external commands. Message: [_1]', ""
                )
            );
        }
        elsif ( $? & 127 ) {
            my $message = sprintf(
                "child died with signal %d, %s coredump\n",
                ( $? & 127 ),
                ( $? & 128 ) ? 'with' : 'without'
            );

            MT->log(
                $plugin->translate(
                    'Failed to execute external commands. Message: [_1]',
                    $message
                )
            );
        }
    }
}

for my $dir (@dirs) {
    my @files;
    if ( -d $dir ) {
        local *DIR;
        opendir( DIR, $dir ) or die $ERRNO;
        @files = readdir(DIR) or die $ERRNO;
        closedir DIR or die $ERRNO;
    }

    if (@files) {
        for my $file (@files) {
            if ( $file =~ /\.file\.est$/ ) {
                $file = File::Spec->catdir( $dir, $file );
                if ( $fmgr->exists($file) ) {
                    $fmgr->delete($file);
                }
            }
        }
    }
}

if ( -d $index_tmp ) {
    if ( -d $index ) {
        File::Find::finddepth(
            sub {
                unless (/^\./) {
                    my $fn       = $_;
                    my $origfile = $File::Find::name;
                    my $destdir  = dirname($File::Find::name);
                    my $indexw   = quotemeta($index);

                    $destdir =~ s/$indexw/$index_remove/;
                    unless ( -d $destdir ) {
                        $fmgr->mkpath($destdir);
                    }
                    my $destfile = File::Spec->catdir( $destdir, $fn );
                    if ( -f $origfile ) {
                        copy $origfile, $destfile or die $ERRNO;
                        unlink $origfile;
                    }
                    elsif ( -d $origfile ) {
                        rmdir $origfile or die $!;
                    }
                }
            },
            $index
        );
    }

    File::Find::finddepth(
        sub {
            unless (/^\./) {
                my $fn         = $_;
                my $origfile   = $File::Find::name;
                my $destdir    = dirname($File::Find::name);
                my $index_tmpw = quotemeta($index_tmp);

                $destdir =~ s/$index_tmpw/$index/;
                unless ( -d $destdir ) {
                    $fmgr->mkpath($destdir);
                }
                my $destfile = File::Spec->catdir( $destdir, $fn );
                if ( -f $origfile ) {
                    copy $origfile, $destfile or die $ERRNO;
                }
            }
        },
        $index_tmp
    );
    rmtree($index_tmp);

    my $abs_path = File::Spec->abs2rel( $index, $cwd );
    my @directories_to_search = ($abs_path);
    my @wantedFiles;
    File::Find::find(
        sub {
            push( @wantedFiles, $File::Find::name )
                unless (/^\./);
        },
        @directories_to_search
    );

    File::Path::rmtree( ["$index_remove"] ) if ( -d "$index_remove" );
    $app->log(
        $plugin->translate( 'Make all blog\'s index for [_1]', $index ) );
}

END {
    if ($index_tmp) {
        File::Path::rmtree( ["$index_tmp"] ) if ( -d "$index_tmp" );
    }
    if ($index_remove) {
        File::Path::rmtree( ["$index_remove"] ) if ( -d "$index_remove" );
    }
}

1;
