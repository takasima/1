<MTIfIE>
<mt:if name="ie_version" eq="6">
<mt:setvar name="old_internet_explorer" value="0">
</mt:if>
</MTIfIE>
<mt:setvarblock name="html_head" append="1">
<link rel="stylesheet" href="<$mt:var name="static_uri"$>plugins/ExtFields/css/extfields.css" />
<style type="text/css">
<mt:if name="compact_attachfile">
.extfield-extend-field { display:none !important; }
</mt:if>
</style>
<script type="text/javascript">
<MTJSCompressor config="1">
var isIE = (document.documentElement.getAttribute("style") == document.documentElement.style);
jQuery(function(jQuery) {
    extFieldInit();
    <mt:if name="hide_extfields">
    jQuery('#ext-field-label')
        .addClass('toggle-ext-field close')
        .click(function() {
            jQuery('#ext-flelds-area').toggle();
            jQuery(this)
                .toggleClass('open')
                .toggleClass('close');
        });
    jQuery('#ext-flelds-area').hide();
    </mt:if>
    // ------------------------------------
    // widget
    // ------------------------------------
    jQuery('#ext-fields #ext-fields-options')
        <mt:unless name="old_internet_explorer">.hide();</mt:unless>
    jQuery("#ext-fields .widget-header .close")
        <mt:unless name="old_internet_explorer">.hide();</mt:unless>
    // open ext-fields widget
    jQuery("#ext-fields .ext-field-toggle-link").click(function() {
        jQuery("#ext-fields-options").toggle();
        jQuery("#ext-fields .ext-field-toggle-link").toggle();
        jQuery("#ext-fields #newFldLabel").focus();
    });
    // close ext-field widget
    jQuery("#ext-fields-options .actions-bar .cancel").click(function(){
        jQuery("#ext-fields-options").toggle();
        jQuery(".ext-field-toggle-link").show();
    });
    // create ext-field
    jQuery("#ext-fields-options .actions-bar .submit").click(function(){
        makeNewExtField();
        return false;
    })
//        .bind('click', extFieldInit);
    jQuery("#newFldType, #newFldLabel").keypress(function(e){
        if (e.which == 13 || e.which == 3) {
            jQuery("#createExtField").click();
            return false;
        }
        return true;
    });
});
function extFieldInit(){
    jQuery('#ext-flelds-area').sortable({
        items: 'div.ext-field',
        placeholder: 'placeholder',
        distance: 3,
        opacity: 0.8,
        cursor: 'move',
        forcePlaceholderSize: true,
        handle: '.sort-handle',
        containment: 'document',
        update: function(){
            var sort_id = '';
            jQuery('.ext-field-header', '#ext-flelds-area').parent().attr('id', function(){
                var id = this.id.replace("-wrap", "");
                if (sort_id == "") {
                    sort_id += id;
                } else {
                    sort_id += "," + id;
                }
            });
            jQuery('input[name="newFldNames"]').val(sort_id.toString());
        }
    });
    // remove ext-field
    jQuery('img.remove')
        .click(function(){
            var target = jQuery(this).parent().attr('rel');
            remove_div(target);
        });
    // text format selector
    jQuery('.ext-field .ext-field-formatselect').change(function(){
        var field_name = jQuery(this).attr('rel');
        textareaCustom(this, field_name);
    });
}
function createElement(name, attributes, css){
    var element = jQuery(document.createElement(name));
    if (attributes) {
        element.attr(attributes);
    }
    if (css) {
        element.css(css);
    }
    return element;
}
function addAttributes(element, attributes){
    element.attr(attributes);
    return element;
}
function makeNewExtField(){
    // ==============================
    // check
    // ==============================
    //check label
    var check_label = jQuery('#newFldLabel').val();
    if (check_label == '') {
        alert('<mt:var name="name_alert_msg">');
        return;
    }else{
        check_label = check_label.replace(/&/g,'&amp;');
        check_label = check_label.replace(/>/g,'&gt;');
        check_label = check_label.replace(/</g,'&lt;');
    }
    // item list
    var type = jQuery('#newFldType').val();
    if (type == 'checkbox')
    {
        var item = prompt("<mt:var name="cb_msg">", "");
        if (!item) {
            return;
        }
    }
    else if (type == 'radio' || type == 'select' || type == 'cbgroup')
    {
        item = prompt("<mt:var name="prompt_msg">", "");
        if (!item) {
            return;
        }
    }
    var count      = jQuery('input[name="newFldCount"]').val();
    var target     = jQuery('#ext-flelds-area');
    var field_name = 'extfields-' + count + '-' + type;
    var attributes = {};
    var css        = {};
    // ==============================
    // create input field
    // ==============================
    if (type == 'text')
    {
        var attributes = {
            'type'            : 'text',
            'name'            : field_name,
            'id'              : field_name,
            'mt:watch-change' : '1',
            'autocomplete'    : 'off',
            'class'           : 'text full text'
        };
        var input = createElement('input', attributes);
    }
    else if (type == 'textarea')
    {
/*format*/
        // ------------------------------
        // create text format selector
        // ------------------------------
        var attributes = {
            'name'  : field_name + '-textformat',
            'id'    : field_name + '-textformat',
            'rel'   : field_name,
            'class' : 'ext-field-formatselect'
        };
        var format_selector = createElement('select', attributes);
        format_selector.change(function(){
            var field_name = jQuery(this).attr('rel');
            textareaCustom(this, field_name);
        });
        // set text-format options
        format_selector = setTextFormat(format_selector);
        // create wrapper of text format selector
        var attributes = {
            'class' : 'ext-field-format full-width'
        };
<mt:unless name="old_internet_explorer">
        var text_format = createElement('div', attributes);
        text_format
            .append('<__trans phrase="Format:"> ')
            .append(format_selector);
</mt:unless>
/*format*/
        // ------------------------------
        // create textarea
        // ------------------------------
        var attributes = {
            'name'            : field_name,
            'id'              : field_name,
            'mt:watch-change' : '1',
            'class'           : 'text full low ta ext-field-textarea'
        };
        var input = createElement('textarea', attributes);
    }
    else if (type == 'date')
    {
        // ------------------------------
        // get date
        // ------------------------------
        var date  = new Date();
        var year  = date.getYear();
        var month = date.getMonth() + 1;
        var day   = date.getDate();
        var hour  = date.getHours();
        var min   = date.getMinutes();
        var sec   = date.getSeconds();
        if (year < 2000) {
            year += 1900;
        }
        if ((month + '').length == 1) {
            month = '0' + month;
        }
        if ((day + '').length == 1) {
            day = '0' + day;
        }
        if ((hour + '').length == 1) {
            hour = '0' + hour;
        }
        if ((min + '').length == 1) {
            min = '0' + min;
        }
        if ((sec + '').length == 1) {
            sec = '0' + sec;
        }
        // ------------------------------
        // create date field
        // ------------------------------
        var attributes = {
            'type'            : 'text',
            'name'            : field_name,
            'id'              : field_name,
            'mt:watch-change' : '1',
            'autocomplete'    : 'off',
            'class'           : 'entry-date text-date'
        }
        var date_field = createElement('input', attributes);
        date_field
            .val(year + '-' + month + '-' + day);
        // ------------------------------
        // create time field
        // ------------------------------
        var attributes = {
            'type'            : 'text',
            'name'            : field_name + '-time',
            'id'              : field_name + '-time',
            'mt:watch-change' : '1',
            'autocomplete'    : 'off',
            'class'           : 'entry-time'
        };
        var time_field = createElement('input', attributes);
        time_field
             .val(hour + ':' + min + ':' + sec);
        // ------------------------------
        // set date field and time field
        // ------------------------------
        var attributes = {
            'class' : 'date-time-fields'
        }
        var input = createElement('span', attributes);
        input
            .append(date_field)
            .append(time_field);
    }
    else if (type == 'checkbox')
    {
        // ------------------------------
        // create checkbox
        // ------------------------------
        var attributes = {
            'type'            : 'checkbox',
            'name'            : field_name,
            'id'              : field_name,
            'value'           : '1',
            'mt:watch-change' : '1',
            'autocomplete'    : 'off'
        };
        var css = {
            'margin-right': '7px',
            'border'      : 'none'
        };
        var checkbox = createElement('input', attributes, css);
        // ------------------------------
        // label
        // ------------------------------
        var input_label = jQuery(document.createElement('label'));
        input_label
            .append(checkbox)
            .append(item);
        // ------------------------------
        // input[type='hidden']
        // ------------------------------
        var attributes = {
            'type'  : 'hidden',
            'name'  : field_name + '-select_item',
            'value' : item
        };
        var hidden_item = createElement('input', attributes);
        // ------------------------------
        // wrapper
        // ------------------------------
        var input = createElement('div');
        input
            .append(input_label)
            .append(hidden_item);
    }
    else if (type == 'radio')
    {
        var items = item.split(',');
        // ------------------------------
        // wrapper
        // ------------------------------
        var input = createElement('div');
        // ------------------------------
        // radio
        // ------------------------------
        for (i = 0; i < items.length; i++){
            // create radio button
            var attributes = {
                'type'            : 'radio',
                'name'            : field_name,
                'id'              : field_name + (i + 1),
                'value'           : items[i],
                'mt:watch-change' : '1',
                'autocomplete'    : 'off'
            };
            var css = {
                 'margin-right': '7px',
                 'border'      : 'none'
            }
            var radio = createElement('input', attributes, css);
            // create label
            var attributes = {};
            var css = {
                'margin-right' : '15px'
            };
            var input_label = createElement('label', attributes, css);
            input_label
                .append(radio)
                .append(items[i]);
            // push
            input
                .append(input_label);
        }
        // ------------------------------
        // input[type='hdden']
        // ------------------------------
        var attributes = {
            'type'  : 'hidden',
            'name'  : field_name + '-multiple',
            'value' : item
        };
        var hidden_item = createElement('input', attributes);
        input
            .append(hidden_item);
    }
    else if (type == 'select')
    {
        var items  = item.split(',');
        // ------------------------------
        // select
        // ------------------------------
        var attributes = {
            'name'            : field_name,
            'id'              : field_name,
            'mt:watch-change' : '1',
            'autocomplete'    : 'off',
            'class'           : 'full-width'
        };
        var select = createElement('select', attributes);
        // ------------------------------
        // options
        // ------------------------------
        for (i = 0; i < items.length; i++){
            var attributes = {
                'id'    : field_name + i,
                'value' : items[i]
            };
            var option = createElement('option', attributes);
            option
                .append(items[i]);
            select
                .append(option);
        }
        // ------------------------------
        // input[type='hidden']
        // ------------------------------
        var attributes = {
            'type'  : 'hidden',
            'name'  : field_name + '-multiple',
            'value' : item
        };
        var hidden_item = createElement('input', attributes);
        // ------------------------------
        // wrapper
        // ------------------------------
        var input  = createElement('div');
        input
            .append(select)
            .append(hidden_item);
    }
    else if (type == 'file' || type == 'file_compact')
    {
        // ------------------------------
        // alt text
        // ------------------------------
        // create label
        var input_alt_label = createElement('label');
        input_alt_label
            .append('<mt:var name="itemname">: ');
        // create input field
        var attributes = {
            'type'     : 'text',
            'name'     : field_name + '-alttext',
            'class'    : 'text full'
        };
        var css = {
            'margin-top' : '5px'
        };
        var input_alt = createElement('input', attributes, css);
        // create alt text wrapper
        var attributes = {
            'class' : 'ext-field-file-alt'
        };
        var css = {
            'margin-bottom' : '8px'
        };
        var wrapper_alt = createElement('div', attributes, css);
        wrapper_alt
            .append(input_alt_label)
            .append(input_alt);
        // ------------------------------
        // file field
        // ------------------------------
        // create input field
        var attributes = {
            'name'            : field_name,
            'id'              : field_name,
            'type'            : 'file',
            'mt:watch-change' : '1',
            'autocomplete'    : 'off',
            'class'           :'border'
        };
        var input_file = createElement('input', attributes);
        // create label
        var input_file_label = createElement('label');
        input_file_label
            .append('<mt:var name="choosefile">: ')
            .append(input_file);
        // create wrapper
        var attributes = {
            'class' : 'ext-field-file-file'
        };
        var css = {
            'margin-bottom' : '8px'
        };
        var wrapper_file = createElement('div', attributes, css);
        // push
        wrapper_file
            .append(input_file_label);
        if (type == 'file') {
            // ------------------------------
            // image description
            // ------------------------------
            // create label
            var input_description_label = createElement('label'); //Label kill the textarea focus
            input_description_label
                .append('<mt:var name="itemdesc">: ');
/*format*/
            // create text format selector
            var attributes = {
                'name'  : field_name + '-textformat',
                'id'    : field_name + '-textformat',
                'rel'   : field_name + '-desctext',
                'class' : 'ext-field-formatselect'
            };
            var text_format_selector = createElement('select', attributes);
            text_format_selector.change(function(){
                var field_name = jQuery(this).attr('rel');
                textareaCustom(this, field_name);
            });
            text_format_selector = setTextFormat(text_format_selector);
            // create wrapper of text format selector
            var attributes = {
                'class' : 'ext-field-format'
            };
            var css = {
                'margin-top' : '5px'
            };
<mt:unless name="old_internet_explorer">
            var text_format = createElement('div', attributes, css);
            text_format
                .append('<__trans phrase="Format:"> ')
                .append(text_format_selector);
</mt:unless>
/*format*/
            // create image description field
            var attributes = {
                'name'     : field_name + '-desctext',
                'id'       : field_name + '-desctext',
                'class'    : 'text full low ta ext-field-textarea'
            };
            var css = {
                'overflow' : 'auto'
            }
            var input_description = createElement('textarea', attributes, css);
            // create wrapper of image description
            var attributes = {
                'class' : 'ext-field-file-description extfield-extend-field'
            };
            var css = {
                'margin-bottom' : '8px'
            };
            var wrapper_description = createElement('div', attributes, css);
            // push
            wrapper_description
                .append(input_description_label)
                <mt:unless name="old_internet_explorer">.append(text_format)</mt:unless>
                .append(input_description);
            // ------------------------------
            // upload file path
            // ------------------------------
            // create input field
            var attributes = {
                'name'     : field_name + '-filepath',
                'type'     : 'text',
                'class'    : 'text short border'
            };
            var css = {
                'width' : '120px'
            };
            var input_file_path = createElement('input', attributes, css);
            // create label
            var input_file_path_label = createElement('label');
            input_file_path_label
                .append('<mt:var name="destination">: <<mt:var name="siteroot">> /<mt:var name="upload_path">/ ')
                .append(input_file_path);
            // create wrapper
            var attributes = {
                'class' : 'ext-field-file-path extfield-extend-field'
            };
            var css = {
                'margin-bottom' : '8px'
            };
            var wrapper_file_path = createElement('div', attributes, css);
            // push
            wrapper_file_path
                .append(input_file_path_label);
            // ------------------------------
            // over write
            // ------------------------------
            // overwrite button
            var attributes = {
                'name'            : field_name + '-overwrite',
                'type'            : 'radio',
                'id'              :field_name + '-overwrite1',
                'value'           : 'overwrite',
                'mt:watch-change' : '1',
                'autocomplete'    : 'off'
            };
            var css = {
                'margin-right' : '5px',
                'margin-left'  : '12px',
                'border'       : 'none'
            };
            var radio_overwrite = createElement('input', attributes, css);
            // create overwrite label
            var radio_overwrite_label = createElement('label');
            radio_overwrite_label
                .append(radio_overwrite)
                .append('<mt:var name="overwrite">');
            // create rename button
            var attributes = {
                'name'            : field_name + '-overwrite',
                'type'            : 'radio',
                'id'              : field_name + '-overwrite2',
                'value'           : 'rename',
                'checked'         : 'checked',
                'mt:watch-change' : '1',
                'autocomplete'    : 'off'
            };
            var css = {
                'margin-right' : '5px',
                'margin-left'  : '9px',
                'border'       : 'none'
            };
            var radio_rename = createElement('input', attributes, css);
            // create rename label
            var radio_rename_label = createElement('label');
            radio_rename_label
                .append(radio_rename)
                .append('<mt:var name="rename">');
            // create wrapper
            var attributes = {
                'class' : 'ext-field-file-overwrite extfield-extend-field'
            };
            var wrapper_overwrite = createElement('div', attributes);
            // push
            wrapper_overwrite
                .append('<mt:var name="exists_msg">')
                .append(radio_overwrite_label)
                .append(radio_rename_label);
        } else {
            var attributes = {
                'name'  : field_name + '-textformat',
                'type'  : 'hidden',
                'value' : '1'
            };
            var text_format_selector = createElement('input', attributes);
            var attributes = {
                'name'  : field_name + '-desctext',
                'type'  : 'hidden',
                'value' : ''
            };
            var input_description = createElement('input', attributes);
            var attributes = {
                'name'  : field_name + '-overwrite',
                'type'  : 'hidden',
                'value' : 'rename'
            };
            var radio_rename = createElement('input', attributes);
            var attributes = {
                'name'  : field_name + '-filepath',
                'type'  : 'hidden',
                'value' : '',
                'class' : 'text short'
            };
            var input_file_path = createElement('input', attributes);
            var file_compact_hidden = createElement('div');
            file_compact_hidden
                .append(text_format_selector)
                .append(input_description)
                .append(radio_rename)
                .append(input_file_path);
        }
        // ------------------------------
        // wrapper
        // ------------------------------
        var attributes = {
            'class' : 'ext-field-content-border'
        }
        var input = createElement('div', attributes);
        if (type == 'file') {
            input
                .append(wrapper_alt)
                .append(wrapper_description)
                .append(wrapper_file)
                .append(wrapper_file_path)
                .append(wrapper_overwrite);
        } else {
            input
                .append(wrapper_alt)
                .append(wrapper_file)
                .append(file_compact_hidden);
        }
    }
    else if (type == 'cbgroup')
    {
        var items = item.split(',');
        // create element
        var input = createElement('div');
        for (i = 0; i < items.length; i++){
            // create checkbox
            var attributes = {
                'type'            : 'checkbox',
                'name'            : field_name + (i + 1),
                'id'              : field_name + (i + 1),
                'value'           : items[i],
                'mt:watch-change' : '1',
                'autocomplete'    : 'off'
            };
            var css = {
                'margin-right' : '7px',
                'border'       : 'none'
            };
            var checkbox  = createElement('input', attributes, css);
            // create label
            var attributes = {};
            var css = {
                'margin-right' : '15px'
            };
            var input_label = createElement('label', attributes, css);
            // push
            input_label
                .append(checkbox)
                .append(items[i]);
            input
                .append(input_label);
        }
        var attributes = {
            'type'  : 'hidden',
            'name'  : field_name + '-multiple',
            'value' : item
        };
        var hidden_item = createElement('input', attributes);
        var attributes = {
            'type'  : 'hidden',
            'name'  : field_name,
            'value' : '1'
        };
        var real_field = createElement('input', attributes);
        // push
        input
            .append(hidden_item)
            .append(real_field);
    }
    // ==============================
    // .ext-field-header
    // ==============================
    // remove button icon
    var attributes = {
        'src'    : StaticURI + 'images/status_icons/close.gif',
        'width'  : 9,
        'height' : 9,
        'class'  : 'icon remove'
    };
    var css = {
        'vertical-align' : '1px'
    }
    var icon_remove = createElement('img', attributes, css);
    icon_remove.click(function(){
        var target = jQuery(this).parent().attr('rel');
        remove_div(target);
     });
    // create remove button
    var attributes = {
        'href'  : 'javascript:void(0)',
        'rel'   : field_name + '-wrap'
    };
    var button_remove = createElement('a', attributes);
    button_remove
        .append(icon_remove); // add remove icon
    var attributes = {
        'src' : StaticURI + 'plugins/ExtFields/images/dragdrop_min.gif',
        'width'  : 13,
        'height' : 11
    };
    var css = {
        'margin-right' : '5px',
        'vertical-align' : '0'
    }
    var icon_drag = createElement('img', attributes, css);
/*format*/
    var attributes = {
        'src' : StaticURI + 'images/status_icons/download.gif',
        'width'  : 9,
        'height' : 9
    };
    var css = {
        'margin-left' : '2px'
    }
    var icon_down = createElement('img', attributes, css);
/*format*/
    var attributes = {
        'class' : 'sort-handle'
    };
    var sort_handle = createElement('span', attributes);
    sort_handle
        .append(icon_drag);
    // create label
    var ext_field_header_label = createElement('label');
    ext_field_header_label
        .append(sort_handle)
        .append(check_label + ' ')
        .append(button_remove) // add remove button
    // div.ext-field-header
    var attributes = {
        'class' : 'ext-field-header'
    };
    var ext_field_header = createElement('div', attributes);
    ext_field_header
        .append(ext_field_header_label);
    // ==============================
    // .ext-field-content
    // ==============================
    var attributes = {
        'type'  : 'hidden',
        'name'  : field_name + '-label',
        'id'    : field_name + '-label',
        'value' : check_label
    };
    var ext_field_hidden = createElement('input', attributes);
    var attributes = {
        'class' : 'ext-field-content-inner'
    };
    var ext_field_content_inner = createElement('div', attributes);
/*format*/
<mt:unless name="old_internet_explorer">
    if (type == 'textarea') {
        ext_field_content_inner
            .append(text_format);
    }
</mt:unless>
/*format*/
    ext_field_content_inner
        .append(input)
        .append(ext_field_hidden);
    if (type == 'checkbox' || type == 'radio' || type == 'cbgroup') {
        var attributes = {
            'class' : 'ext-field-content field-content-text'
        };
    } else {
        var attributes = {
            'class' : 'ext-field-content'
        };
    }
    var ext_field_content = createElement('div', attributes);
    ext_field_content
        .append(ext_field_content_inner);
    // ==============================
    // .ext-field
    // ==============================
    var attributes = {
        'id'    : field_name + '-wrap',
        'class' : 'field field-top-label ext-field'
    };
    var ext_field_wrapper = createElement('div', attributes);
    ext_field_wrapper
        .append(ext_field_header)
        .append(ext_field_content);
    target.append(ext_field_wrapper);
    jQuery('#' + field_name).focus();
    if (type == 'date') {
//        jQuery("#createExtField").click();
        jQuery('#' + field_name)
            .datepicker({
                dateFormat         : 'yy-mm-dd',
                dayNamesMin        : ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
                monthNames         : ['-01', '-02', '-03', '-04', '-05', '-06', '-07', '-08', '-09', '-10', '-11', '-12'],
                showMonthAfterYear : true,
                prevText           : '&lt;',
                nextText           : '&gt;'
            })
            .focus();
    }
    // ==============================
    // set ext-field value
    // ==============================
    var fieldsFlds = jQuery('input[name="newFldNames"]').val();
    if (fieldsFlds == '') {
        fieldsFlds = field_name;
    } else {
        fieldsFlds = fieldsFlds + ',' + field_name;
    }
    count++;
    jQuery('input[name="newFldNames"]').val(fieldsFlds);
    jQuery('input[name="newFldCount"]').val(count);
    // reset input form
    jQuery('#newFldLabel').attr('value', '');
    jQuery('#newFldType').val('text');
}

function remove_div(wrap) {
    var cont = confirm('<mt:var name="remove_msg">');
    if (cont == true) {
        sp_wrap = wrap.split('-');
        var name      = sp_wrap[0] + '-' + sp_wrap[1] + '-' + sp_wrap[2];
        var flds      = jQuery('input[name="newFldNames"]').attr('value');
        var parent    = jQuery('#ext-flelds-area');
        var fldsarray = flds.split(',');
        var max       = 0;
        var newlist   = '';
        for (i = 0; i < fldsarray.length; i++){
            var item = fldsarray[i];
            if (item == name) {
                jQuery("#" + wrap).remove();
            } else {
                sp_item = item.split('-');
                cnum = sp_item[1];
                cnum = cnum - 0;
                if (newlist != '') {
                    newlist = newlist + ',';
                }
                newlist = newlist + item;
                if (max < cnum) {
                    max = cnum;
                }
            }
        }
        max++;
//        jQuery('input[name="newFldCount"]').val(max);
        jQuery('input[name="newFldNames"]').val(newlist);
    }
}

function setTextFormat(format_select)
{
    var options = {
         1  : '<__trans phrase="None">',
         2  : '<__trans phrase="Convert Line Breaks">',
         11 : 'Markdown',
         12 : 'Markdown + SmartyPants',
<mt:ifPlugin component="TinyMCE">         9  : '<__trans phrase="Rich Text">',</mt:ifPlugin>
         13 : 'Textile 2'
    };
    for (var i in options) {
        var option = jQuery(document.createElement('option'));
        option
            .attr('value', i)
            .append(options[i]);
        format_select
            .append(option);
    }
    return format_select;
}
</MTJSCompressor>
</script>
<script type="text/javascript">

//=========================================================
//    textareaCustom
//=========================================================
var textareaCustom = function(ele, textareaID){
    var fldProperty = textareaID.split('-');
    fldProperty = fldProperty[2]
    var elm = jQuery("#" + textareaID);
    if(ele.value == '9'){
<mt:ifPlugin component="TinyMCE">
        tinymce_editor.show(elm);
</mt:ifPlugin>
    }else{
        try{
            jQuery('#' + textareaID).tinymce().remove();
        }catch(e){}
    }
}

<mt:ifPlugin component="TinyMCE">
//=========================================================
//    check format TinyMCE
//=========================================================
jQuery(function(){
    jQuery('.ext-field-formatselect').each(function(){
        if(this.value == 9){
            var nm = this.id.split('-textformat')[0];
            if(nm.match('file')){
                nm = nm + '-desctext';
            }
            tinymce_editor.show(jQuery('#' + nm));
        }
    })
});
</mt:ifPlugin>

function overwrite_extfile (obj, id1, id2, id3, cb){
    var tg1 = jQuery("#" + id1);
    var tg2 = jQuery("#" + id2);
    var tg3 = jQuery("#" + id3);
    var cb  = jQuery("#" + cb);
    if(obj.checked) {
        tg1.removeAttr('disabled');
        tg2.removeAttr('disabled');
        tg3.removeAttr('disabled');
        cb.removeAttr('checked');
    } else {
        tg1.attr('disabled', 'disabled');
        tg2.attr('disabled', 'disabled');
        tg3.attr('disabled', 'disabled');
    }
}
function remove_extfile (obj, id1, id2, id3, cb){
    var tg1 = jQuery("#" + id1);
    var tg2 = jQuery("#" + id2);
    var tg3 = jQuery("#" + id3);
    var cb  = jQuery("#" + cb);
    if(obj.checked) {
        tg1.attr('disabled', 'disabled');
        tg2.attr('disabled', 'disabled');
        tg3.attr('disabled', 'disabled');
        cb.removeAttr('checked');
    }
}
</script>
</mt:setvarblock>
<mt:setvarblock name="related_content" append="1">
<__trans_section component="ExtFields">
    <mt:setvarblock name="header_action">
    <mt:unless name="old_internet_explorer">
    <a class="open ext-field-toggle-link" href="javascript:void(0);"><__trans phrase="Create"></a>
    <a class="close ext-field-toggle-link" href="javascript:void(0);"><__trans phrase="Close"></a>
    </mt:unless>
    </mt:setvarblock>
    <div id="ext-fields-field"<mt:unless name="disp_prefs_show_ext-fields"> class="hidden"</mt:unless>>
    <mtapp:widget
        id="ext-fields"
        label="<__trans phrase="Extra Fields">"
        header_action="$header_action">
        <div id="ext-fields-options">
            <div class="field field-top-label">
                <div class="field-header">
                    <label for="newFldLabel"><__trans phrase="Label"></label>
                </div>
                <div class="field-content">
                    <input type="text" id="newFldLabel" class="text" />
                </div>
            </div>
            <div class="field field-top-label">
                <div class="field-header">
                    <label for="newFldType"><__trans phrase="Type"></label>
                </div>
                <div class="field-content">
                    <select id="newFldType">
                        <option value="text"><mt:var name="label_text"></option>
                        <option value="textarea"><mt:var name="label_textarea"></option>
                        <option value="radio"><mt:var name="label_radio"></option>
                        <option value="checkbox"><mt:var name="label_checkbox"></option>
                        <option value="cbgroup"><mt:var name="label_checkbox_group"></option>
                        <option value="select"><mt:var name="label_select"></option>
                        <option value="file"><mt:var name="label_file"></option>
                        <option value="file_compact"><mt:var name="label_file_compact"></option>
                        <option value="date"><mt:var name="label_date"></option>
                    </select>
                </div>
            </div>
            <div class="actions-bar display-options-actions-bar buttons">
                <div class="actions-bar-inner"<MTIfIE><mt:if name="ie_version" eq="6"> style="zoom:1"</mt:if></MTIfIE>>
                    <a href="javascript:void(0)" id="createExtField" class="submit button"><__trans phrase="Add Field"></a>
                    <MTIgnore><a href="javascript:void(0);" class="button cancel" title="<__trans phrase="Close display options">"><__trans phrase="Cancel"></a></MTIgnore>
                </div>
            </div><mt:if name="old_internet_explorer">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="<$mt:var name="static_uri"$>images/spacer.gif" width="1" height="1" alt="" /></mt:if>
        </div>
    </mtapp:widget>
    </div>
</__trans_section>
</mt:setvarblock>
